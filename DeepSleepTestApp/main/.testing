////#include <string.h>
////#include <iostream>
//#include "SPI.h"
//#include "PN532_SPI.h"
//#include "PN532.h"
//#include "NfcAdapter.h"
//#include "Arduino.h"
//
//extern "C" {
//	#include <stdio.h>
//	#include <string.h>
//	#include <stdlib.h>
//	#include "freertos/FreeRTOS.h"
//	#include "freertos/task.h"
//	#include "freertos/queue.h"
//	#include "driver/gpio.h"
//	#include "esp_attr.h"
//}
//
//#define GPIO_OUTPUT_LO_R    14
//#define GPIO_OUTPUT_LO_G    12
//#define GPIO_OUTPUT_L0_B	27
//#define GPIO_OUTPUT_BZZR	13
//#define GPIO_OUTPUT_PIN_SEL  ((1ULL<<GPIO_OUTPUT_LO_R) | (1ULL<<GPIO_OUTPUT_LO_G) | (1ULL<<GPIO_OUTPUT_L0_B) (1ULL<<GPIO_OUTPUT_BZZR))
//
///* For input:
//#define GPIO_INPUT_IO_0     34
//#define GPIO_INPUT_IO_1     35
//#define GPIO_INPUT_PIN_SEL  ((1ULL<<GPIO_INPUT_IO_0) | (1ULL<<GPIO_INPUT_IO_1))
//#define ESP_INTR_FLAG_DEFAULT 0
//*/
//
//
//extern "C" {
//	int app_main(void);
//}
//
//int app_main(void)
//{
//    gpio_config_t io_conf;
//    //disable interrupt
//    io_conf.intr_type = GPIO_PIN_INTR_DISABLE;
//    //set as output mode
//    io_conf.mode = GPIO_MODE_OUTPUT;
//    //bit mask of the pins that you want to set,e.g.GPIO18/19
//    io_conf.pin_bit_mask = GPIO_OUTPUT_PIN_SEL;
//    //disable pull-down mode
//    io_conf.pull_down_en = 0;
//    //disable pull-up mode
//    io_conf.pull_up_en = 0;
//    //configure GPIO with the given settings
//    gpio_config(&io_conf);
//
//    //interrupt of rising edge
//    io_conf.intr_type = GPIO_PIN_INTR_NEGEDGE;
//    //bit mask of the pins, use GPIO4/5 here
//    io_conf.pin_bit_mask = GPIO_INPUT_PIN_SEL;
//    //set as input mode
//    io_conf.mode = GPIO_MODE_INPUT;
//    //enable pull-up mode
//    io_conf.pull_up_en = 1;
//    gpio_config(&io_conf);
//
//    //change gpio interrupt type for one pin
//    gpio_set_intr_type(GPIO_INPUT_IO_0, GPIO_PIN_INTR_POSEDGE);
//
//    //create a queue to handle gpio event from isr
//    gpio_evt_queue = xQueueCreate(10, sizeof(uint32_t));
//    //start gpio task
//    xTaskCreate(gpio_task_example, "gpio_task_example", 2048, NULL, 10, NULL);
//
//    //install gpio isr service
//    gpio_install_isr_service(ESP_INTR_FLAG_DEFAULT);
//    //hook isr handler for specific gpio pin
//    gpio_isr_handler_add(GPIO_INPUT_IO_0, gpio_isr_handler, (void*) GPIO_INPUT_IO_0);
//    //hook isr handler for specific gpio pin
//    gpio_isr_handler_add(GPIO_INPUT_IO_1, gpio_isr_handler, (void*) GPIO_INPUT_IO_1);
//
//    //remove isr handler for gpio number.
//    gpio_isr_handler_remove(GPIO_INPUT_IO_0);
//    //hook isr handler for specific gpio pin again
//    gpio_isr_handler_add(GPIO_INPUT_IO_0, gpio_isr_handler, (void*) GPIO_INPUT_IO_0);
//
//    int cnt = 0;
//    while(1) {
//
//        vTaskDelay(2000 / portTICK_RATE_MS);
//        gpio_set_level(GPIO_OUTPUT_IO_0, (cnt) % 2);
//        gpio_set_level(GPIO_OUTPUT_IO_1, (cnt) % 2);
//
//        printf("cnt: %d\n", cnt++);
//
//		printf("(cnt: %d)\n", cnt);
//    }
//    return 0;
//}
